
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(window.document);
var app = (function (internal, svelteHashRouter) {
	'use strict';

	/* src/App.svelte generated by Svelte v3.23.2 */
	const file = "src/App.svelte";

	function create_fragment(ctx) {
		let div;
		let router;
		let current;
		router = new svelteHashRouter.Router({ $$inline: true });

		const block = {
			c: function create() {
				div = internal.element("div");
				internal.create_component(router.$$.fragment);
				internal.attr_dev(div, "class", "container");
				internal.add_location(div, file, 4, 0, 65);
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				internal.insert_dev(target, div, anchor);
				internal.mount_component(router, div, null);
				current = true;
			},
			p: internal.noop,
			i: function intro(local) {
				if (current) return;
				internal.transition_in(router.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				internal.transition_out(router.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) internal.detach_dev(div);
				internal.destroy_component(router);
			}
		};

		internal.dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance($$self, $$props, $$invalidate) {
		const writable_props = [];

		Object.keys($$props).forEach(key => {
			if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<App> was created with unknown prop '${key}'`);
		});

		let { $$slots = {}, $$scope } = $$props;
		internal.validate_slots("App", $$slots, []);
		$$self.$capture_state = () => ({ Router: svelteHashRouter.Router });
		return [];
	}

	class App extends internal.SvelteComponentDev {
		constructor(options) {
			super(options);
			internal.init(this, options, instance, create_fragment, internal.safe_not_equal, {});

			internal.dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "App",
				options,
				id: create_fragment.name
			});
		}
	}

	const app = new App({
		target: document.body,
		props: {
			name: 'world'
		}
	});

	window.app = app;

	return app;

}(internal, svelteHashRouter));
//# sourceMappingURL=bundle.js.map
